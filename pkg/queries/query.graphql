query GetMemberOrganisations($page: Int, $pageSize: Int) {
  memberOrganisations(input: {
    page: $page,
    page_size: $pageSize
  }) {
    # @genqlient(typename: "Organisation")
    items {
      id
      code
      name
      state
      created_at
      updated_at
      deleted_at
    }
    page
    page_size
    total_items
    total_pages
  }
}

query GetConfigs($organisationId: UUID!, $classes: [ConfigClass!], $page: Int, $pageSize: Int) {
  configs(input: {
    organisation_id: $organisationId,
    classes: $classes,
    page: $page,
    page_size: $pageSize
  }) {
    # @genqlient(typename: "ConfigItem")
    items {
      id
      code
      class
      name
      state
      created_at
      updated_at
    }
    page_size
    page
    total_items
    total_pages
  }
}

query GetConfig($organisationId: UUID!, $code: String!) {
  # @genqlient(typename: "Config")
  config(input: {
    organisation_id: $organisationId,
    code: $code
  }) {
    id
    code
    class
    name
    # @genqlient(typename: "Resources")
    resources {
      code
      type
      data
    }
    # @genqlient(typename: "Access")
    access {
      inbound
      outbound
    }
    version_number
    state
    # @genqlient(typename: "RevisionItem")
    revisions {
      id
      version_number
      state
      created_at
      updated_at
    }
    # @genqlient(typename: "ContainerRepositoryItem")
    containerRepositories {
      id
      code
      stack {
        outputs {
          output_key
          output_value
        }
      }
      state
      created_at
      updated_at
    }
    # @genqlient(typename: "Deployment")
    deployments {
      id
      state
      # @genqlient(typename: "Environment")
      environment {
        id
        type
        state
        code
        name
        created_at
        updated_at
      }
      created_at
      updated_at
    }
    created_at
    updated_at
  }
}

query GetEnvironments($organisationId: UUID!, $codes: [String!], $states: [StackState!], $page: Int, $pageSize: Int) {
  environments(input: {
    organisation_id: $organisationId,
    codes: $codes,
    states: $states,
    page: $page,
    page_size: $pageSize
  }) {
    # @genqlient(typename: "Environment")
    items {
      id
      type
      state
      code
      name
      created_at
      updated_at
    }
    page_size
    page
    total_items
    total_pages
  }
}

query GetContainerRepository($organisationId: UUID!, $aggregateId: UUID!) {
  # @genqlient(typename: "ContainerRepository")
  containerRepository(input: {
    organisation_id: $organisationId,
    id: $aggregateId,
  }) {
    id
    code
    state
    stack {
      id
      state
      # @genqlient(typename: "StackOutputItem")
      outputs {
        output_key
        output_value
      }
    }
    created_at
    updated_at
  }
}

query GetApiKeys($organisationId: UUID!, $page: Int, $pageSize: Int) {
  apiKeys(input: {
    organisation_id: $organisationId,
    page: $page,
    page_size: $pageSize
  }) {
    # @genqlient(typename: "ApiKey")
    items {
      id
      state
      organisation_id
      created_at
      updated_at
      deleted_at
      authed_at
    }
    page_size
    page
    total_items
    total_pages
  }
}

query GetDeploymentRevision($organisationId: UUID!, $aggregateId: UUID!) {
  # @genqlient(typename: "DeploymentRevision")
  deploymentRevision(input: {
    organisation_id: $organisationId,
    id: $aggregateId
  }) {
    id
    state
    # @genqlient(typename: "Deployment")
    deployment {
      id
      state
      # @genqlient(typename: "Environment")
      environment {
        id
        type
        state
        code
        name
        created_at
        updated_at
      }
      created_at
      updated_at
    }
    # @genqlient(typename: "Environment")
    environment {
      id
      type
      state
      code
      name
      created_at
      updated_at
    }
    # @genqlient(typename: "ConfigItem")
    config {
      id
      code
      class
      name
      state
      created_at
      updated_at
    }
    created_at
    updated_at
  }
}

mutation NewDeployment($organisationId: UUID!, $aggregateId: UUID!, $environmentId: UUID!, $configId: UUID!, $configRevisionId: UUID!, $revisionId: UUID!) {
  newDeployment(input: {
    organisation_id: $organisationId,
    aggregate_id: $aggregateId,
    environment_id: $environmentId,
    config_id: $configId,
    config_revision_id: $configRevisionId,
    revision_id: $revisionId,
  })
}

mutation CreateContainerRepository($organisationId: UUID!, $aggregateId: UUID!, $configId: UUID!, $code: String!) {
  createContainerRepository(input: {
    organisation_id: $organisationId,
    aggregate_id: $aggregateId,
    config_id: $configId,
    code: $code,
  })
}

mutation DeleteContainerRepository($organisationId: UUID!, $id: UUID!) {
  deleteContainerRepository(input: {
    organisation_id: $organisationId,
    id: $id,
  })
}

mutation LoginContainerRepository($organisationId: UUID!) {
  # @genqlient(typename: "AuthContainerRepository")
  loginContainerRepository(input: {
    id: $organisationId,
  }) {
    username,
    password,
    registry_url,
  }
}

mutation CreateApiKey($aggregateId: UUID!, $organisationId: UUID!) {
  # @genqlient(typename: "IdWithToken")
  createApiKey(input: {
    aggregate_id: $aggregateId,
    organisation_id: $organisationId,
  }) {
    id
    token
  }
}

mutation UpdateApiKey($aggregateId: UUID!) {
  # @genqlient(typename: "IdWithToken")
  updateApiKey(input: {
    aggregate_id: $aggregateId,
  }) {
    id
    token
  }
}

mutation DeleteApiKey($aggregateId: UUID!) {
  deleteApiKey(input: {
    id: $aggregateId,
  })
}

mutation UpdateConfig($input: UpdateConfigInput!) {
  updateConfig(input: $input)
}