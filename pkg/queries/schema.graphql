"""
The @defer directive may be specified on a fragment spread to imply
de-prioritization, that causes the fragment to be omitted in the initial
response, and delivered as a subsequent response afterward. A query with @defer
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred
delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

scalar Any

type ApiKey {
  id: UUID!
  state: ApiKeyState!
  organisation_id: UUID!
  created_at: Time!
  updated_at: Time
  deleted_at: Time
  authed_at: Time
}

input ApiKeysInput {
  organisation_id: UUID!
  page: Int
  page_size: Int
  states: [ApiKeyState!]
}

enum ApiKeyState {
  new
  created
  deleted
}

type AuthContainerRepository {
  username: String!
  password: String!
  registry_url: String!
}

type AWSAccount {
  id: UUID!
  name: String!
  state: StackState!
  stack: Stack
  created_at: Time!
  updated_at: Time
}

input CodeWithOrgInput {
  organisation_id: UUID!
  code: String!
}

type Config {
  id: UUID!
  code: String!
  class: ConfigClass!
  name: String!
  folder: Folder
  resources: [Resource!]!
  access: ConfigAccess
  version_number: String
  state: ConfigState!
  created_at: Time
  updated_at: Time
  registry: ContainerRegistry
  deployments: [Deployment!]!
  revisions: [ConfigRevision!]!
  containerRepositories: [ContainerRepository!]!
  secrets: [Secret!]!
}

type ConfigAccess {
  inbound: [String!]
  outbound: [String!]
}

input ConfigAccessInput {
  inbound: [String!]
  outbound: [String!]
}

enum ConfigClass {
  compute
  storage
  queue
  notification
}

type ConfigRevision {
  id: UUID!
  access: ConfigAccess
  resources: [Resource!]!
  version_number: String!
  state: ConfigState!
  created_at: Time
  updated_at: Time
}

input ConfigsInput {
  organisation_id: UUID!
  classes: [ConfigClass!]
  codes: [String!]
  states: [ConfigState!]
  folder_id: UUID
  no_folder: Boolean
  page: Int
  page_size: Int
}

enum ConfigState {
  pending
  running
  failed
  deleted
}

enum ContainerInsightsMetricName {
  CpuUtilized
  CpuReserved
  DeploymentCount
  DesiredTaskCount
  EphemeralStorageReserved
  EphemeralStorageUtilized
  MemoryUtilized
  MemoryReserved
  NetworkRxBytes
  NetworkTxBytes
  PendingTaskCount
  RunningTaskCount
  ServiceCount
  StorageReadBytes
  StorageWriteBytes
  TaskCount
  TaskSetCount
}

type ContainerRegistry {
  username: String!
  registry_url: String!
}

input ContainerRepositoriesInput {
  organisation_id: UUID!
  states: [StackState!]
  config_id: UUID
  page: Int
  page_size: Int
}

type ContainerRepository {
  id: UUID!
  state: StackState!
  stack: Stack
  config_id: UUID!
  code: String!
  created_at: Time!
  updated_at: Time
}

input CreateApiKeyInput {
  organisation_id: UUID!
  aggregate_id: UUID!
}

input CreateAWSAccountInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String!
}

input CreateCheckoutSessionInput {
  organisation_code: String!
  organisation_id: UUID!
  currency: String!
  interval: PlanInterval!
  tier: PlanTier!
  units: PlanUnitsInput!
  stripe_customer_id: String
}

input CreateConfigInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  code: String!
  class: ConfigClass!
  name: String!
  folder_id: UUID
}

input CreateContainerRepositoryInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  config_id: UUID!
  code: String!
}

input CreateDomainInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  domain: String!
  environment_id: UUID!
}

input CreateEdgeInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  domain_id: UUID!
  subdomain: String
}

input CreateEnvironmentInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  type: EnvironmentType!
  code: String!
  name: String!
  regions: [String!]!
  azs: Int!
  account_id: UUID!
  sort_order: Int!
}

input CreateFolderInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String
  parent_id: UUID
}

input CreateMemberInput {
  aggregate_id: UUID!
  organisation_id: UUID!
  user_id: UUID!
  role: MemberRole!
}

input CreateOrganisationInput {
  aggregate_id: UUID!
  code: String!
  name: String!
  settings: OrganisationSettingsInput
}

input CreateSecretInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  config_id: UUID!
  environment_id: UUID!
  code: String!
  secret_string: String!
}

scalar Date

type Deployment {
  id: UUID!
  revision_id: UUID!
  state: StackState!
  environment: Environment!
  stack: Stack
  config_revision: ConfigRevision!
  created_at: Time
  updated_at: Time
}

type DeploymentEnvironment {
  id: UUID!
  code: String!
  name: String!
  created_at: Time!
  updated_at: Time
}

type DeploymentItem {
  deployment_id: UUID!
  version_number: String!
  deployment_revision_id: UUID
  config_revision_id: UUID!
  environment: Environment!
  exists: Boolean!
  active: Boolean!
  previous: Boolean!
  state: StackState
  updated_at: Time
}

type DeploymentRevision {
  id: UUID!
  deployment: Deployment!
  environment: Environment!
  config: Config!
  config_revision: ConfigRevision!
  created_at: Time!
  state: StackState!
  updated_at: Time
}

type Deployments {
  versions: [DeploymentVersion!]!
  environments: [DeploymentEnvironment!]!
}

input DeploymentsInput {
  organisation_id: UUID!
  page: Int
  page_size: Int
  config_id: UUID!
}

type DeploymentVersion {
  version_number: String!
  state: ConfigState!
  created_at: Time!
  updated_at: Time
  items: [DeploymentItem!]!
}

type Domain {
  id: UUID!
  domain: String!
  state: StackState!
  stack: Stack
  environment: Environment!
  verified: Boolean!
  parent: Domain
  created_at: Time!
  updated_at: Time
  verified_at: Time
  deleted_at: Time
}

input DomainsInput {
  organisation_id: UUID!
  states: [StackState!]
  verified: Boolean
  page: Int
  page_size: Int
}

type Edge {
  id: UUID!
  name: String!
  domain: Domain!
  subdomain: String
  state: StackState!
  stack: Stack
  created_at: Time!
  updated_at: Time
}

type Environment {
  id: UUID!
  type: EnvironmentType!
  state: StackState!
  stack: Stack
  code: String!
  name: String!
  regions: [String!]!
  azs: Int!
  sort_order: Int!
  account: AWSAccount!
  created_at: Time!
  updated_at: Time
}

input EnvironmentsInput {
  organisation_id: UUID!
  codes: [String!]
  states: [StackState!]
  page: Int
  page_size: Int
}

enum EnvironmentType {
  personal
  emphemeral
  static
}

type Folder {
  id: UUID!
  name: String!
  state: FolderState!
  parent_id: UUID
  children_ids: [UUID!]!
  created_at: Time
  updated_at: Time
}

input FoldersInput {
  organisation_id: UUID!
}

enum FolderState {
  active
  deleted
}

input IdInput {
  id: UUID!
}

input IdWithOrgInput {
  organisation_id: UUID!
  id: UUID!
}

type IdWithToken {
  id: UUID!
  token: String!
}

input InviteMemberInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String!
  email: String!
}

scalar JSON

type Log {
  event_id: String!
  ingestion_time: Int!
  log_stream_name: String!
  message: String!
  timestamp: Int!
}

type LogsOutput {
  logs: [Log!]!
  next_token: String
}

input LogsSubscriptionInput {
  id: UUID!
  organisation_id: UUID!
  deployment_id: UUID!
  region: String!
  log_group: String!
  start_time: Int
  end_time: Int
  next_token: String
}

type Member {
  id: UUID!
  organisation_id: UUID!
  role: MemberRole!
  state: MemberState!
  user: User!
  created_at: Time!
  updated_at: Time
  deleted_at: Time
}

enum MemberRole {
  member
  owner
}

input MembersInput {
  user_id: UUID
  organisation_id: UUID!
  states: [MemberState!]
  page: Int
  page_size: Int
}

enum MemberState {
  pending
  created
  deleted
}

type MessageData {
  code: String
  value: String
}

type MetricDataResult {
  id: String
  label: String
  messages: [MessageData!]!
  status_code: MetricStatusCode!
  timestamps: [Time!]!
  values: [Float!]!
}

input MetricDimension {
  name: String!
  value: String!
}

input MetricQueryInput {
  id: String!
  label: String!
  metric_statistic: String!
  metric_name: String!
  period: Int!
  dimensions: [MetricDimension!]!
}

input MetricsInput {
  organisation_id: UUID!
  deployment_id: UUID!
  region: String!
  start_time: Int!
  end_time: Int!
  metric_queries: [MetricQueryInput!]!
  metric_namespace: String!
}

type MetricsOutput {
  metric_data_results: [MetricDataResult!]!
  messages: [MessageData!]!
  next_token: String
  result_metadata: MiddlewareMetadata!
}

enum MetricStatusCode {
  Complete
  InternalError
  PartialData
  Forbidden
}

type MiddlewareMetadata {
  values: JSON!
}

input MoveConfigInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String!
  folder_id: UUID
}

input MoveFolderInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String
  parent_id: UUID
}

type Mutation {
  createOrganisation(input: CreateOrganisationInput!): UUID!
  updateOrganisation(input: UpdateOrganisationInput!): UUID!
  deleteOrganisation(input: IdInput!): UUID!
  updateUser(input: UpdateUserInput!): UUID!
  createMember(input: CreateMemberInput!): UUID!
  deleteMember(input: IdInput!): UUID!
  updateMember(input: UpdateMemberInput!): UUID!
  inviteMember(input: InviteMemberInput!): UUID!
  resendMemberInvite(input: ResendMemberInviteInput!): UUID!
  updatePlan(input: UpdatePlanInput!): UUID!
  cancelPlan(input: PlanIdInput!): UUID!
  reactivatePlan(input: PlanIdInput!): UUID!
  createCheckoutSession(input: CreateCheckoutSessionInput!): String
  createAWSAccount(input: CreateAWSAccountInput!): UUID!
  updateAWSAccount(input: UpdateAWSAccountInput!): UUID!
  deleteAWSAccount(input: IdWithOrgInput!): UUID!
  createEnvironment(input: CreateEnvironmentInput!): UUID!
  updateEnvironment(input: UpdateEnvironmentInput!): UUID!
  deleteEnvironment(input: IdWithOrgInput!): UUID!
  orderEnvironments(input: OrderEnvironmentsInput!): [UUID!]!
  createDomain(input: CreateDomainInput!): UUID!
  verifyDomain(input: IdWithOrgInput!): UUID!
  deleteDomain(input: IdWithOrgInput!): UUID!
  createEdge(input: CreateEdgeInput!): UUID!
  deleteEdge(input: IdWithOrgInput!): UUID!
  createFolder(input: CreateFolderInput!): UUID!
  moveFolder(input: MoveFolderInput!): UUID!
  deleteFolder(input: IdWithOrgInput!): UUID!
  createConfig(input: CreateConfigInput!): UUID!
  updateConfig(input: UpdateConfigInput!): UUID!
  moveConfig(input: MoveConfigInput!): UUID!
  deleteConfig(input: IdWithOrgInput!): UUID!
  createContainerRepository(input: CreateContainerRepositoryInput!): UUID!
  deleteContainerRepository(input: IdWithOrgInput!): UUID!
  loginContainerRepository(input: IdInput!): AuthContainerRepository!
  createSecret(input: CreateSecretInput!): UUID!
  updateSecret(input: CreateSecretInput!): UUID!
  deleteSecret(input: IdWithOrgInput!): UUID!
  createApiKey(input: CreateApiKeyInput!): IdWithToken!
  updateApiKey(input: UpdateApiKeyInput!): IdWithToken!
  deleteApiKey(input: IdInput!): UUID!
  newDeployment(input: NewDeploymentInput!): UUID!
  deleteDeployment(input: IdWithOrgInput!): UUID!
  cancelDeployment(input: IdWithOrgInput!): UUID!
  readNotifications(input: ReadNotificationsInput!): [UUID!]!
}

input NewDeploymentInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  environment_id: UUID!
  config_id: UUID!
  config_revision_id: UUID!
  revision_id: UUID!
}

type Notification {
  notification_id: UUID!
  aggregate_id: UUID!
  aggregate_type: String!
  message: String!
  timestamp: Time!
  read: Boolean!
  metadata: JSON
}

input OrderEnvironmentInput {
  aggregate_id: UUID!
  sort_order: Int!
}

input OrderEnvironmentsInput {
  organisation_id: UUID!
  environment_orders: [OrderEnvironmentInput!]!
}

type Organisation {
  id: UUID!
  code: String!
  name: String!
  settings: OrganisationSettings!
  state: OrganisationState!
  created_at: Time!
  updated_at: Time
  deleted_at: Time
}

type OrganisationSettings {
  registry_id: UUID
}

input OrganisationSettingsInput {
  registry_id: UUID
}

input OrganisationsInput {
  page: Int
  page_size: Int
}

enum OrganisationState {
  new
  created
  deleted
}

input OrgIdInput {
  organisation_id: UUID!
}

type PagedApiKeysOutput {
  items: [ApiKey!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedAWSAccountsOutput {
  items: [AWSAccount!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedConfigsOutput {
  items: [Config!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedContainerRepositoriesOutput {
  items: [ContainerRepository!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedDomainsOutput {
  items: [Domain!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedEdgesOutput {
  items: [Edge!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedEnvironmentsOutput {
  items: [Environment!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

input PagedInput {
  page: Int
  page_size: Int
}

input PagedInputWithOrg {
  organisation_id: UUID!
  page: Int
  page_size: Int
}

input PagedInputWithOrgWithStates {
  organisation_id: UUID!
  page: Int
  page_size: Int
  states: [StackState!]
}

type PagedMembersOutput {
  items: [Member!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedNotificationsOutput {
  items: [Notification!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedOrganisationsOutput {
  items: [Organisation!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type PagedSecretsOutput {
  items: [Secret!]!
  page_size: Int!
  page: Int!
  total_items: Int!
  total_pages: Int!
}

type Plan {
  id: UUID!
  state: PlanState!
  billing_start_date: Time
  cancels_at: Time
  created_at: Time!
  currency: String!
  deleted_at: Time
  interval: PlanInterval!
  tier: PlanTier!
  organisation_id: UUID!
  stripe_customer_id: String
  stripe_subscription_id: String
  units: PlanUnits!
  updated_at: Time
}

input PlanCalculateInput {
  interval: PlanInterval!
  units: PlanUnitsInput!
}

type PlanCalculateOutput {
  price: Int!
}

input PlanIdInput {
  plan_id: UUID!
}

enum PlanInterval {
  monthly
  annually
}

enum PlanState {
  new
  created
  active
  cancelled
  deleted
}

enum PlanTier {
  free
  pro
  enterprise
}

type PlanUnits {
  microservices: Int!
  databases: Int!
}

input PlanUnitsInput {
  microservices: Int!
  databases: Int!
}

input PreviewProrationInput {
  plan_id: UUID!
  interval: PlanInterval
  units: PlanUnitsInput
}

type PreviewProrationOutput {
  amount: Int!
}

type Query {
  organisations(input: PagedInput!): PagedOrganisationsOutput!
  memberOrganisations(input: OrganisationsInput!): PagedOrganisationsOutput!
  members(input: MembersInput!): PagedMembersOutput!
  config(input: CodeWithOrgInput!): Config
  configs(input: ConfigsInput!): PagedConfigsOutput!
  folders(input: FoldersInput!): [Folder!]!
  deployments(input: DeploymentsInput!): Deployments!
  deployment(input: IdWithOrgInput!): Deployment
  deploymentRevision(input: IdWithOrgInput!): DeploymentRevision
  awsAccount(input: IdWithOrgInput!): AWSAccount
  awsAccounts(input: PagedInputWithOrgWithStates!): PagedAWSAccountsOutput!
  environment(input: CodeWithOrgInput!): Environment
  environments(input: EnvironmentsInput!): PagedEnvironmentsOutput!
  domain(input: IdWithOrgInput!): Domain
  domains(input: DomainsInput!): PagedDomainsOutput!
  edge(input: IdWithOrgInput!): Edge
  edges(input: PagedInputWithOrgWithStates!): PagedEdgesOutput!
  planCalculate(input: PlanCalculateInput!): PlanCalculateOutput!
  plan(input: OrgIdInput!): Plan
  previewProration(input: PreviewProrationInput!): PreviewProrationOutput!
  containerRepository(input: IdWithOrgInput!): ContainerRepository
  containerRepositories(input: ContainerRepositoriesInput!): PagedContainerRepositoriesOutput!
  secret(input: IdWithOrgInput!): Secret
  secrets(input: SecretsInput!): PagedSecretsOutput!
  apiKey(input: IdWithOrgInput!): ApiKey
  apiKeys(input: ApiKeysInput!): PagedApiKeysOutput!
  unreadNotifications(input: PagedInputWithOrg): PagedNotificationsOutput!
  stackInfo(input: StackSetInstanceInput!): StackDetails!
  metrics(input: MetricsInput!): MetricsOutput!
}

enum RDSMetricName {
  BinLogDiskUsage
  BurstBalance
  CheckpointLag
  ConnectionAttempts
  CPUUtilization
  CPUCreditUsage
  CPUCreditBalance
  CPUSurplusCreditBalance
  CPUSurplusCreditsCharged
  DatabaseConnections
  DiskQueueDepth
  DiskQueueDepthLogVolume
  FailedSQLServerAgentJobsCount
  FreeableMemory
  FreeStorageSpace
  FreeStorageSpaceLogVolume
  MaximumUsedTransactionIDs
  NetworkReceiveThroughput
  NetworkTransmitThroughput
  OldestReplicationSlotLag
  ReadIOPS
  ReadIOPSLogVolume
  ReadLatency
  ReadLatencyLogVolume
  ReadThroughput
  ReadThroughputLogVolume
  ReplicaLag
  ReplicationChannelLag
  ReplicationSlotDiskUsage
  SwapUsage
  TransactionLogsDiskUsage
  TransactionLogsGeneration
  WriteIOPS
  WriteIOPSLogVolume
  WriteLatency
  WriteLatencyLogVolume
  WriteThroughput
  WriteThroughputLogVolume
}

input ReadNotificationsInput {
  organisation_id: UUID!
  notification_ids: [UUID!]!
}

input ResendMemberInviteInput {
  organisation_id: UUID!
  email: String!
}

type Resource {
  code: String!
  type: ResourceType!
  data: JSON
  overrides: ResourceOverrides
}

input ResourceInput {
  code: String!
  type: ResourceType!
  data: JSON
  overrides: ResourceOverridesInput
}

type ResourceOverrides {
  environments: [ResourceOverridesEnvironment!]
}

type ResourceOverridesEnvironment {
  environment: String!
  data: JSON
}

input ResourceOverridesEnvironmentInput {
  environment: String!
  data: JSON
}

input ResourceOverridesInput {
  environments: [ResourceOverridesEnvironmentInput!]
}

enum ResourceType {
  container
  database
  cluster
  bucket
  queue
  notification
}

type Secret {
  id: UUID!
  state: StackState!
  stack: Stack
  config_id: UUID!
  environment: Environment!
  code: String!
  created_at: Time!
  updated_at: Time
}

input SecretsInput {
  organisation_id: UUID!
  states: [StackState!]
  config_id: UUID
  page: Int
  page_size: Int
}

enum SNSMetricName {
  NumberOfMessagesPublished
  NumberOfNotificationsDelivered
  NumberOfNotificationsFailed
  NumberOfNotificationsFilteredOut
  NumberOfNotificationsFilteredOutMessageAttributes
  NumberOfNotificationsFilteredOutMessageBody
  NumberOfNotificationsFilteredOutInvalidAttributes
  NumberOfNotificationsFilteredOutNoMessageAttributes
  NumberOfNotificationsFilteredOutInvalidMessageBody
  NumberOfNotificationsRedrivenToDlq
  NumberOfNotificationsFailedToRedriveToDlq
  PublishSize
  SMSMonthToDateSpentUSD
  SMSSuccessRate
}

enum SQSMetricName {
  ApproximateAgeOfOldestMessage
  ApproximateNumberOfMessagesDelayed
  ApproximateNumberOfMessagesNotVisible
  ApproximateNumberOfMessagesVisible
  NumberOfEmptyReceives
  NumberOfMessagesDeleted
  NumberOfMessagesReceived
  NumberOfMessagesSent
  SentMessageSize
}

type Stack {
  id: UUID!
  state: StackState!
  name: String!
  status: String
  resources: [StackResource!]
  outputs: [StackOutput!]
}

type StackDetails {
  status: String
  status_reason: String
  resources: [StackResource!]
  outputs: [StackOutput!]
}

type StackOutput {
  description: String!
  output_key: String!
  output_value: String!
}

type StackResource {
  physical_resource_id: String!
  logical_resource_id: String!
  resource_type: String!
  resource_status: String!
  description: String!
  resource_status_reason: String!
  timestamp: Time!
}

input StackSetInstanceInput {
  organisation_id: UUID!
  environment_id: UUID!
  aws_region: String!
  stack_set_name: String!
}

enum StackState {
  new
  creating
  created
  updating
  updated
  failed
  deleting
  deleted
  cancelling
}

type Subscription {
  notification(organisation_id: UUID!): Notification!
  logs(input: LogsSubscriptionInput!): LogsOutput!
}

scalar Time

input UpdateApiKeyInput {
  aggregate_id: UUID!
}

input UpdateAWSAccountInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String!
}

input UpdateConfigInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String!
  resources: [ResourceInput!]!
  access: ConfigAccessInput
  version_number: String!
  revision_id: UUID!
}

input UpdateEnvironmentInput {
  organisation_id: UUID!
  aggregate_id: UUID!
  name: String!
}

input UpdateMemberInput {
  id: UUID!
  role: MemberRole!
}

input UpdateOrganisationInput {
  aggregate_id: UUID!
  name: String!
  settings: OrganisationSettingsInput
}

input UpdatePlanInput {
  plan_id: UUID!
  interval: PlanInterval
  tier: PlanTier
  units: PlanUnitsInput
}

input UpdateUserInput {
  aggregate_id: UUID!
  name: String!
  email: String!
  avatar_url: String
}

type User {
  id: UUID!
  avatar_url: String!
  company_size: String
  company: String
  email: String!
  metadata: JSON
  name: String!
  state: UserState!
  created_at: Time!
  updated_at: Time
  deleted_at: Time
}

enum UserState {
  new
  created
  deleted
}

scalar UUID

