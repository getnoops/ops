// Package brain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package brain

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for ActiveDeploymentStatus.
const (
	FAILED  ActiveDeploymentStatus = "FAILED"
	PENDING ActiveDeploymentStatus = "PENDING"
	RUNNING ActiveDeploymentStatus = "RUNNING"
	SUCCESS ActiveDeploymentStatus = "SUCCESS"
)

// Defines values for PollerQueueEntryCmdType.
const (
	DEPLOYMENTFINISHED PollerQueueEntryCmdType = "DEPLOYMENT_FINISHED"
	INFORMUSER         PollerQueueEntryCmdType = "INFORM_USER"
	PUSHDOCKERIMAGE    PollerQueueEntryCmdType = "PUSH_DOCKER_IMAGE"
	UPLOADSTATICFILE   PollerQueueEntryCmdType = "UPLOAD_STATIC_FILE"
)

// ActiveDeployment defines model for ActiveDeployment.
type ActiveDeployment struct {
	DeploymentId    string                 `json:"deploymentId"`
	EnvironmentName string                 `json:"environmentName"`
	Status          ActiveDeploymentStatus `json:"status"`
}

// ActiveDeploymentStatus defines model for ActiveDeployment.Status.
type ActiveDeploymentStatus string

// CliPollRequest defines model for CliPollRequest.
type CliPollRequest struct {
	CommandId *string `json:"commandId,omitempty"`
	ExecToken *string `json:"execToken,omitempty"`
}

// CliPollResponse defines model for CliPollResponse.
type CliPollResponse struct {
	Commands []PollerQueueEntry `json:"commands"`
}

// CreateDeploymentRequest defines model for CreateDeploymentRequest.
type CreateDeploymentRequest struct {
	EnvironmentName string `json:"environmentName"`
}

// CreateDeploymentResponse defines model for CreateDeploymentResponse.
type CreateDeploymentResponse struct {
	DeploymentId string `json:"deploymentId"`
	SessionToken string `json:"sessionToken"`
	UploadUrl    string `json:"uploadUrl"`
}

// DockerLoginResponse defines model for DockerLoginResponse.
type DockerLoginResponse struct {
	Password string `json:"password"`
	Url      string `json:"url"`
	UserName string `json:"userName"`
}

// NotifyUploadCompleteRequest defines model for NotifyUploadCompleteRequest.
type NotifyUploadCompleteRequest struct {
	Error   *string `json:"error,omitempty"`
	Success bool    `json:"success"`
}

// PollerQueueEntry defines model for PollerQueueEntry.
type PollerQueueEntry struct {
	CmdType      PollerQueueEntryCmdType `json:"cmdType"`
	Command      string                  `json:"command"`
	CreatedAt    *int64                  `json:"createdAt,omitempty"`
	DeploymentId string                  `json:"deploymentId"`
	Id           *string                 `json:"id,omitempty"`
	SeqOrder     *int64                  `json:"seqOrder,omitempty"`
}

// PollerQueueEntryCmdType defines model for PollerQueueEntry.CmdType.
type PollerQueueEntryCmdType string

// CreateNewDeploymentJSONRequestBody defines body for CreateNewDeployment for application/json ContentType.
type CreateNewDeploymentJSONRequestBody = CreateDeploymentRequest

// NotifyDockerUploadCompletedJSONRequestBody defines body for NotifyDockerUploadCompleted for application/json ContentType.
type NotifyDockerUploadCompletedJSONRequestBody = NotifyUploadCompleteRequest

// PollForCommandsJSONRequestBody defines body for PollForCommands for application/json ContentType.
type PollForCommandsJSONRequestBody = CliPollRequest

// NotifyStackFileUploadCompletedJSONRequestBody defines body for NotifyStackFileUploadCompleted for application/json ContentType.
type NotifyStackFileUploadCompletedJSONRequestBody = NotifyUploadCompleteRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// BrainClient which conforms to the OpenAPI3 specification for this service.
type BrainClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*BrainClient) error

// Creates a new BrainClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*BrainClient, error) {
	// create a client with sane default values
	client := BrainClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *BrainClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *BrainClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateNewDeployment request with any body
	CreateNewDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNewDeployment(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListActiveDeployments request
	ListActiveDeployments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotifyDockerUploadCompleted request with any body
	NotifyDockerUploadCompletedWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotifyDockerUploadCompleted(ctx context.Context, deploymentId string, body NotifyDockerUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerLogin request
	GetDockerLogin(ctx context.Context, deploymentId string, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PollForCommands request with any body
	PollForCommandsWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PollForCommands(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotifyStackFileUploadCompleted request with any body
	NotifyStackFileUploadCompletedWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotifyStackFileUploadCompleted(ctx context.Context, deploymentId string, body NotifyStackFileUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *BrainClient) CreateNewDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewDeploymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) CreateNewDeployment(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewDeploymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) ListActiveDeployments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListActiveDeploymentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) NotifyDockerUploadCompletedWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyDockerUploadCompletedRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) NotifyDockerUploadCompleted(ctx context.Context, deploymentId string, body NotifyDockerUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyDockerUploadCompletedRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) GetDockerLogin(ctx context.Context, deploymentId string, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerLoginRequest(c.Server, deploymentId, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) PollForCommandsWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPollForCommandsRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) PollForCommands(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPollForCommandsRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) NotifyStackFileUploadCompletedWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyStackFileUploadCompletedRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) NotifyStackFileUploadCompleted(ctx context.Context, deploymentId string, body NotifyStackFileUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyStackFileUploadCompletedRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateNewDeploymentRequest calls the generic CreateNewDeployment builder with application/json body
func NewCreateNewDeploymentRequest(server string, body CreateNewDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewDeploymentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNewDeploymentRequestWithBody generates requests for CreateNewDeployment with any type of body
func NewCreateNewDeploymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListActiveDeploymentsRequest generates requests for ListActiveDeployments
func NewListActiveDeploymentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotifyDockerUploadCompletedRequest calls the generic NotifyDockerUploadCompleted builder with application/json body
func NewNotifyDockerUploadCompletedRequest(server string, deploymentId string, body NotifyDockerUploadCompletedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotifyDockerUploadCompletedRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewNotifyDockerUploadCompletedRequestWithBody generates requests for NotifyDockerUploadCompleted with any type of body
func NewNotifyDockerUploadCompletedRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/%s/docker-uploaded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDockerLoginRequest generates requests for GetDockerLogin
func NewGetDockerLoginRequest(server string, deploymentId string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "svcId", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/%s/docker/login/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPollForCommandsRequest calls the generic PollForCommands builder with application/json body
func NewPollForCommandsRequest(server string, deploymentId string, body PollForCommandsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPollForCommandsRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewPollForCommandsRequestWithBody generates requests for PollForCommands with any type of body
func NewPollForCommandsRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/%s/poll", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotifyStackFileUploadCompletedRequest calls the generic NotifyStackFileUploadCompleted builder with application/json body
func NewNotifyStackFileUploadCompletedRequest(server string, deploymentId string, body NotifyStackFileUploadCompletedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotifyStackFileUploadCompletedRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewNotifyStackFileUploadCompletedRequestWithBody generates requests for NotifyStackFileUploadCompleted with any type of body
func NewNotifyStackFileUploadCompletedRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/%s/stack-uploaded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *BrainClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *BrainClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateNewDeployment request with any body
	CreateNewDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error)

	CreateNewDeploymentWithResponse(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error)

	// ListActiveDeployments request
	ListActiveDeploymentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListActiveDeploymentsResponse, error)

	// NotifyDockerUploadCompleted request with any body
	NotifyDockerUploadCompletedWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyDockerUploadCompletedResponse, error)

	NotifyDockerUploadCompletedWithResponse(ctx context.Context, deploymentId string, body NotifyDockerUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyDockerUploadCompletedResponse, error)

	// GetDockerLogin request
	GetDockerLoginWithResponse(ctx context.Context, deploymentId string, svcId string, reqEditors ...RequestEditorFn) (*GetDockerLoginResponse, error)

	// PollForCommands request with any body
	PollForCommandsWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error)

	PollForCommandsWithResponse(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error)

	// NotifyStackFileUploadCompleted request with any body
	NotifyStackFileUploadCompletedWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyStackFileUploadCompletedResponse, error)

	NotifyStackFileUploadCompletedWithResponse(ctx context.Context, deploymentId string, body NotifyStackFileUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyStackFileUploadCompletedResponse, error)
}

type CreateNewDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r CreateNewDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListActiveDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveDeployment
}

// Status returns HTTPResponse.Status
func (r ListActiveDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListActiveDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotifyDockerUploadCompletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NotifyDockerUploadCompletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotifyDockerUploadCompletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DockerLoginResponse
}

// Status returns HTTPResponse.Status
func (r GetDockerLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PollForCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CliPollResponse
}

// Status returns HTTPResponse.Status
func (r PollForCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PollForCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotifyStackFileUploadCompletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NotifyStackFileUploadCompletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotifyStackFileUploadCompletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateNewDeploymentWithBodyWithResponse request with arbitrary body returning *CreateNewDeploymentResponse
func (c *ClientWithResponses) CreateNewDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error) {
	rsp, err := c.CreateNewDeploymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewDeploymentResponse(rsp)
}

func (c *ClientWithResponses) CreateNewDeploymentWithResponse(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error) {
	rsp, err := c.CreateNewDeployment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewDeploymentResponse(rsp)
}

// ListActiveDeploymentsWithResponse request returning *ListActiveDeploymentsResponse
func (c *ClientWithResponses) ListActiveDeploymentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListActiveDeploymentsResponse, error) {
	rsp, err := c.ListActiveDeployments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListActiveDeploymentsResponse(rsp)
}

// NotifyDockerUploadCompletedWithBodyWithResponse request with arbitrary body returning *NotifyDockerUploadCompletedResponse
func (c *ClientWithResponses) NotifyDockerUploadCompletedWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyDockerUploadCompletedResponse, error) {
	rsp, err := c.NotifyDockerUploadCompletedWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyDockerUploadCompletedResponse(rsp)
}

func (c *ClientWithResponses) NotifyDockerUploadCompletedWithResponse(ctx context.Context, deploymentId string, body NotifyDockerUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyDockerUploadCompletedResponse, error) {
	rsp, err := c.NotifyDockerUploadCompleted(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyDockerUploadCompletedResponse(rsp)
}

// GetDockerLoginWithResponse request returning *GetDockerLoginResponse
func (c *ClientWithResponses) GetDockerLoginWithResponse(ctx context.Context, deploymentId string, svcId string, reqEditors ...RequestEditorFn) (*GetDockerLoginResponse, error) {
	rsp, err := c.GetDockerLogin(ctx, deploymentId, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerLoginResponse(rsp)
}

// PollForCommandsWithBodyWithResponse request with arbitrary body returning *PollForCommandsResponse
func (c *ClientWithResponses) PollForCommandsWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error) {
	rsp, err := c.PollForCommandsWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePollForCommandsResponse(rsp)
}

func (c *ClientWithResponses) PollForCommandsWithResponse(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error) {
	rsp, err := c.PollForCommands(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePollForCommandsResponse(rsp)
}

// NotifyStackFileUploadCompletedWithBodyWithResponse request with arbitrary body returning *NotifyStackFileUploadCompletedResponse
func (c *ClientWithResponses) NotifyStackFileUploadCompletedWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyStackFileUploadCompletedResponse, error) {
	rsp, err := c.NotifyStackFileUploadCompletedWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyStackFileUploadCompletedResponse(rsp)
}

func (c *ClientWithResponses) NotifyStackFileUploadCompletedWithResponse(ctx context.Context, deploymentId string, body NotifyStackFileUploadCompletedJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyStackFileUploadCompletedResponse, error) {
	rsp, err := c.NotifyStackFileUploadCompleted(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyStackFileUploadCompletedResponse(rsp)
}

// ParseCreateNewDeploymentResponse parses an HTTP response from a CreateNewDeploymentWithResponse call
func ParseCreateNewDeploymentResponse(rsp *http.Response) (*CreateNewDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListActiveDeploymentsResponse parses an HTTP response from a ListActiveDeploymentsWithResponse call
func ParseListActiveDeploymentsResponse(rsp *http.Response) (*ListActiveDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListActiveDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotifyDockerUploadCompletedResponse parses an HTTP response from a NotifyDockerUploadCompletedWithResponse call
func ParseNotifyDockerUploadCompletedResponse(rsp *http.Response) (*NotifyDockerUploadCompletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotifyDockerUploadCompletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDockerLoginResponse parses an HTTP response from a GetDockerLoginWithResponse call
func ParseGetDockerLoginResponse(rsp *http.Response) (*GetDockerLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DockerLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePollForCommandsResponse parses an HTTP response from a PollForCommandsWithResponse call
func ParsePollForCommandsResponse(rsp *http.Response) (*PollForCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PollForCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CliPollResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotifyStackFileUploadCompletedResponse parses an HTTP response from a NotifyStackFileUploadCompletedWithResponse call
func ParseNotifyStackFileUploadCompletedResponse(rsp *http.Response) (*NotifyStackFileUploadCompletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotifyStackFileUploadCompletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
